<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SkillMatcher AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-100 to-gray-300 min-h-screen flex flex-col">
    <div id="page1" class="flex-grow flex flex-col justify-center items-center p-4">
        <h1 class="text-4xl font-semibold text-blue-600 mb-8 text-center">
            <span class="bg-gradient-to-r from-blue-500 to-purple-500 text-transparent bg-clip-text">
                SkillMatcher AI
            </span>
            <br>
            Your Personalized Career Guide
        </h1>
        <p class="text-lg text-gray-700 text-center mb-12 max-w-xl">
            Unlock your future potential. SkillMatcher AI analyzes your unique background and the latest job market trends to provide you with tailored career path suggestions.
        </p>
        <button id="getStartedButton" class="bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-semibold px-8 py-3 rounded-full shadow-lg transition duration-300 ease-in-out">
            Get Started - Explore Your Future
        </button>
    </div>

    <div id="page2" class="hidden flex-grow flex flex-col justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md transition duration-500 transform hover:scale-105">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">
                <span class="text-blue-500">Step 1</span> - Create Your Profile
            </h2>
            <form id="registrationForm" class="space-y-4">
                <div>
                    <label for="name" class="block text-gray-700 text-sm font-bold mb-2">Full Name:</label>
                    <input type="text" id="name" name="name" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <div id="name-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <div>
                    <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email:</label>
                    <input type="email" id="email" name="email" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <div id="email-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <div>
                    <label for="age" class="block text-gray-700 text-sm font-bold mb-2">Age:</label>
                    <input type="number" id="age" name="age" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <div id="age-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <button type="submit" class="bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 ease-in-out w-full">
                    Next - Add Your Experience
                </button>
            </form>
            <button id="backToLanding" class="mt-4 text-sm text-blue-500 hover:text-blue-700 hover:underline focus:outline-none focus:shadow-outline">
                Back to Home
            </button>
        </div>
    </div>

    <div id="page3" class="hidden flex-grow flex flex-col justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md transition duration-500 transform hover:scale-105">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">
                <span class="text-blue-500">Step 2</span> - Your Work Experience
            </h2>
            <form id="experienceForm" class="space-y-4">
                <div>
                    <label for="workExperience" class="block text-gray-700 text-sm font-bold mb-2">Work Experience (Years):</label>
                    <input type="number" id="workExperience" name="workExperience" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <div id="workExperience-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <div>
                    <label for="jobTitle" class="block text-gray-700 text-sm font-bold mb-2">Current Job Title:</label>
                    <input type="text" id="jobTitle" name="jobTitle" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <div id="jobTitle-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <button type="submit" class="bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 ease-in-out w-full">
                    Next - Your Education
                </button>
            </form>
            <button id="backToRegistration" class="mt-4 text-sm text-blue-500 hover:text-blue-700 hover:underline focus:outline-none focus:shadow-outline">
                Back to Profile
            </button>
        </div>
    </div>

    <div id="page4" class="hidden flex-grow flex flex-col justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md transition duration-500 transform hover:scale-105">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">
                <span class="text-blue-500">Step 3</span> - Your Education
            </h2>
            <form id="educationForm" class="space-y-4">
                <div>
                    <label for="educationLevel" class="block text-gray-700 text-sm font-bold mb-2">Highest Education Level:</label>
                    <select id="educationLevel" name="educationLevel" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        <option value="">Select Education Level</option>
                        <option value="highSchool">High School</option>
                        <option value="bachelors">Bachelor's Degree</option>
                        <option value="masters">Master's Degree</option>
                        <option value="doctorate">Doctorate</option>
                    </select>
                    <div id="educationLevel-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <div>
                    <label for="major" class="block text-gray-700 text-sm font-bold mb-2">Major/Field of Study:</label>
                    <input type="text" id="major" name="major" required class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                     <div id="major-error" class="text-red-500 text-xs italic" style="display: none;"></div>
                </div>
                <button type="submit" class="bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 ease-in-out w-full">
                    Show My Career Path
                </button>
            </form>
            <button id="backToExperience" class="mt-4 text-sm text-blue-500 hover:text-blue-700 hover:underline focus:outline-none focus:shadow-outline">
                Back to Experience
            </button>
        </div>
    </div>

    <div id="page5" class="hidden flex-grow flex flex-col justify-center items-center p-4">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg transition duration-500 transform hover:scale-105">
            <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">
                Your Personalized Career Path
            </h2>
            <div id="recommendationResults" class="space-y-4">
                <p class="text-gray-700">
                    Based on your background, here are some potential career paths:
                </p>
                <ul id="careerList" class="list-disc list-inside space-y-2 font-semibold text-blue-600">
                    </ul>
                <div id="loading" class="text-center py-4">
                    <svg class="animate-spin h-5 w-5 text-blue-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
            </div>
            <button id="restartButton" class="mt-6 bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 ease-in-out w-full">
                Restart - Explore Again
            </button>
        </div>
    </div>

    <script>
        // Get page elements
        const page1 = document.getElementById('page1');
        const page2 = document.getElementById('page2');
        const page3 = document.getElementById('page3');
        const page4 = document.getElementById('page4');
        const page5 = document.getElementById('page5');

        // Get button elements
        const getStartedButton = document.getElementById('getStartedButton');
        const backToLandingButton = document.getElementById('backToLanding');
        const backToRegistrationButton = document.getElementById('backToRegistration');
        const backToExperienceButton = document.getElementById('backToExperience');
        const restartButton = document.getElementById('restartButton');

        // Get form elements
        const registrationForm = document.getElementById('registrationForm');
        const experienceForm = document.getElementById('experienceForm');
        const educationForm = document.getElementById('educationForm');

        // Get input elements
        const nameInput = document.getElementById('name');
        const emailInput = document.getElementById('email');
        const ageInput = document.getElementById('age');
        const workExperienceInput = document.getElementById('workExperience');
        const jobTitleInput = document.getElementById('jobTitle');
        const educationLevelInput = document.getElementById('educationLevel');
        const majorInput = document.getElementById('major');

        // Get recommendation elements
        const recommendationResults = document.getElementById('recommendationResults');
        const careerList = document.getElementById('careerList');
        const loadingIndicator = document.getElementById('loading');

        // --- Page Navigation ---

        // Function to show a specific page and hide others
        function showPage(pageId) {
            page1.classList.add('hidden');
            page2.classList.add('hidden');
            page3.classList.add('hidden');
            page4.classList.add('hidden');
            page5.classList.add('hidden');
            document.getElementById(pageId).classList.remove('hidden');
            document.body.classList.toggle('bg-gray-100', pageId !== 'page1'); // Change background for pages other than landing
            document.body.classList.toggle('bg-gradient-to-br', pageId === 'page1');
        }

        // Event listeners for button clicks to navigate between pages
        getStartedButton.addEventListener('click', () => showPage('page2'));
        backToLandingButton.addEventListener('click', () => showPage('page1'));
        backToRegistrationButton.addEventListener('click', () => showPage('page2'));
        backToExperienceButton.addEventListener('click', () => showPage('page3'));
        restartButton.addEventListener('click', () => {
            showPage('page1');
            // Reset form fields
            registrationForm.reset();
            experienceForm.reset();
            educationForm.reset();
             // Clear validation errors
            const errorElements = document.querySelectorAll('.text-red-500');
            errorElements.forEach(errorElement => {
                errorElement.style.display = 'none';
            });
            careerList.innerHTML = ''; // Clear previous recommendations
            recommendationResults.classList.remove('border-2', 'border-blue-500', 'rounded-md', 'p-4'); // Remove styling
        });

        // --- Form Validation ---

        // Function to display an error message
        function displayErrorMessage(inputElementId, message) {
            const errorElementId = inputElementId + '-error';
            const errorElement = document.getElementById(errorElementId);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        // Function to hide an error message
        function hideErrorMessage(inputElementId) {
            const errorElementId = inputElementId + '-error';
            const errorElement = document.getElementById(errorElementId);
            errorElement.style.display = 'none';
        }

        // --- Form Submission and Data Handling ---
        let userData = {}; // Store user data

        // Event listener for the registration form submission
        registrationForm.addEventListener('submit', (event) => {
            event.preventDefault();

            let isValid = true;

            // Validate Name
            const nameValue = nameInput.value.trim();
            if (nameValue === '') {
                displayErrorMessage('name', 'Please enter your full name.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(nameValue)) {
                displayErrorMessage('name', 'Name can only contain letters and spaces.');
                isValid = false;
            } else {
                hideErrorMessage('name');
            }

            // Validate Email
            const emailValue = emailInput.value.trim();
            if (emailValue === '') {
                displayErrorMessage('email', 'Please enter your email address.');
                isValid = false;
            } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(emailValue)) {
                displayErrorMessage('email', 'Please enter a valid email address.');
                isValid = false;
            } else {
                hideErrorMessage('email');
            }

            // Validate Age
            const ageValue = ageInput.value.trim();
            if (ageValue === '') {
                displayErrorMessage('age', 'Please enter your age.');
                isValid = false;
            } else if (isNaN(ageValue) || parseInt(ageValue) <= 0) {
                displayErrorMessage('age', 'Age must be a positive number.');
                isValid = false;
            } else {
                hideErrorMessage('age');
            }

            if (isValid) {
                userData = {
                    name: nameValue,
                    email: emailValue,
                    age: parseInt(ageValue),
                };
                showPage('page3'); // Go to the next page
            }
        });

        // Event listener for the experience form submission
        experienceForm.addEventListener('submit', (event) => {
            event.preventDefault();

            let isValid = true;

            // Validate Work Experience
            const workExperienceValue = workExperienceInput.value.trim();
            if (workExperienceValue === '') {
                displayErrorMessage('workExperience', 'Please enter your work experience.');
                isValid = false;
            } else if (isNaN(workExperienceValue) || parseInt(workExperienceValue) < 0) {
                displayErrorMessage('workExperience', 'Work experience must be a non-negative number.');
                isValid = false;
            } else {
                hideErrorMessage('workExperience');
            }

            // Validate Job Title
            const jobTitleValue = jobTitleInput.value.trim();
            if (jobTitleValue === '') {
                displayErrorMessage('jobTitle', 'Please enter your current job title.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(jobTitleValue)) {
                displayErrorMessage('jobTitle', 'Job Title can only contain letters and spaces.');
                isValid = false;
            }else {
                hideErrorMessage('jobTitle');
            }

            if (isValid) {
                userData = {
                    ...userData,
                    workExperience: parseInt(workExperienceValue),
                    jobTitle: jobTitleValue,
                };
                showPage('page4'); // Go to the next page
            }
        });

        // Event listener for the education form submission
        educationForm.addEventListener('submit', (event) => {
            event.preventDefault();

            let isValid = true;

            // Validate Education Level
            const educationLevelValue = educationLevelInput.value;
            if (educationLevelValue === '') {
                displayErrorMessage('educationLevel', 'Please select your highest education level.');
                isValid = false;
            } else {
                hideErrorMessage('educationLevel');
            }

             // Validate Major
            const majorValue = majorInput.value.trim();
            if (majorValue === '') {
                displayErrorMessage('major', 'Please enter your major.');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(majorValue)) {
                displayErrorMessage('major', 'Major can only contain letters and spaces.');
                isValid = false;
            }else {
                hideErrorMessage('major');
            }

            if (isValid) {
                userData = {
                    ...userData,
                    educationLevel: educationLevelValue,
                    major: majorValue,
                };
                showPage('page5'); // Go to the recommendations page
                getCareerRecommendations(userData); // Get and display recommendations
            }
        });

        // --- Career Recommendation Logic ---
        function getCareerRecommendations(userData) {
            loadingIndicator.style.display = 'block'; // Show loading indicator
            recommendationResults.classList.remove('border-2', 'border-blue-500', 'rounded-md', 'p-4'); // Remove previous styling
            careerList.innerHTML = ''; // Clear previous recommendations

            // Simulate API call with a timeout
            setTimeout(() => {
                let recommendations = [];

                // 1. Base recommendations on education level
                switch (userData.educationLevel) {
                    case 'highSchool':
                        recommendations.push('Entry-Level Sales Representative', 'Customer Service Associate', 'Administrative Assistant');
                        break;
                    case 'bachelors':
                        recommendations.push('Software Engineer', 'Marketing Specialist', 'Financial Analyst', 'Registered Nurse', 'Mechanical Engineer', 'Business Analyst', 'Teacher');
                        break;
                    case 'masters':
                        recommendations.push('Data Scientist', 'Project Manager', 'Investment Banker', 'Nurse Practitioner', 'Electrical Engineer', 'Management Consultant', 'Lawyer');
                        break;
                    case 'doctorate':
                        recommendations.push('Research Scientist', 'University Professor', 'Clinical Psychologist', 'Biomedical Engineer', 'Economist', 'Senior Consultant', 'Judge');
                        break;
                    default:
                        recommendations.push('Career Counselor', 'Life Coach', 'HR Specialist');
                }

                // 2. Refine recommendations based on work experience
                if (userData.workExperience > 5) {
                    recommendations = recommendations.filter(title => !['Entry-Level Sales Representative', 'Customer Service Associate', 'Administrative Assistant', 'Software Engineer', 'Marketing Specialist', 'Financial Analyst'].includes(title));
                } else if (userData.workExperience <= 2){
                    recommendations = recommendations.filter(title => !['Research Scientist', 'University Professor', 'Clinical Psychologist', 'Biomedical Engineer', 'Economist', 'Senior Consultant', 'Judge', 'Data Scientist', 'Project Manager', 'Investment Banker', 'Nurse Practitioner', 'Electrical Engineer', 'Management Consultant', 'Lawyer'].includes(title));
                }

                // 3. Further refine based on job title
                if (userData.jobTitle.toLowerCase().includes('engineer')) {
                    recommendations = recommendations.filter(title => title.includes('Engineer'));
                } else if (userData.jobTitle.toLowerCase().includes('manager')) {
                    recommendations = recommendations.filter(title => title.includes('Manager') || title.includes('Consultant'));
                } else if (userData.jobTitle.toLowerCase().includes('nurse')) {
                    recommendations = recommendations.filter(title => title.includes('Nurse'));
                } else if (userData.jobTitle.toLowerCase().includes('teacher')) {
                    recommendations = recommendations.filter(title => title.includes('Teacher'));
                }

                // 4. Add specific recommendations based on major
                const major = userData.major.toLowerCase();
                if (major.includes('medical')) {
                    recommendations =  ['Doctor', 'Surgeon', 'Pharmacist', 'Nurse Practitioner', 'Registered Nurse', 'Clinical Psychologist', 'Biomedical Engineer'];
                } else if (major.includes('engineering')) {
                   recommendations =  ['Civil Engineer', 'Aerospace Engineer', 'Computer Science', 'Mechanical Engineer', 'Electrical Engineer', 'Biomedical Engineer'];
                } else if (major.includes('business')) {
                    recommendations =  ['Accountant', 'Entrepreneur', 'Financial Analyst', 'Investment Banker', 'Management Consultant', 'Business Analyst', 'Marketing Specialist'];
                } else if (major.includes('law')) {
                    recommendations =  ['Lawyer', 'Paralegal', 'Legal Assistant', 'Judge'];
                } else if (major.includes('arts')) {
                    recommendations =  ['Graphic Designer', 'Web Developer'];
                }

                // Ensure no more than 5 recommendations
                recommendations = recommendations.slice(0, 5);

                loadingIndicator.style.display = 'none'; // Hide loading indicator

                if (recommendations.length > 0) {
                    recommendationResults.classList.add('border-2', 'border-blue-500', 'rounded-md', 'p-4'); // Add styling
                    recommendations.forEach(recommendation => {
                        const li = document.createElement('li');
                        li.textContent = recommendation;
                        careerList.appendChild(li);
                    });
                } else {
                    careerList.innerHTML = '<li class="text-gray-500">No matching career paths found. Please try again.</li>';
                }
            }, 2000); // Simulate a 2-second delay
        }

        
    </script>
</body>
</html>
